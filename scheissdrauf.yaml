---
- name: Create VPC, Subnets, and ECS Service
  hosts: localhost
  gather_facts: no
  collections:
   - amazon.aws
   - community.aws

  vars:
    region: us-east-1
    vpc_cidr: "192.168.88.0/24"
    subnet_cidr: "192.168.88.0/28"
    availability_zone: "us-east-1a"
    ecs_cluster_name: "M_346_ECS_cluster"
    service_name: "spiele-container"
    task_definition_name: "erstell-task"
    container_ports: [8080, 8081, 8082, 8083, 80]
    image_snake: "ghcr.io/sean-mcguinness/m169-nginx-snake:v1"
    image_pong: "ghcr.io/sean-mcguinness/m169-nginx-pong:v1"
    image_tictactoe: "ghcr.io/sean-mcguinness/m169-nginx-tictactoe:v1"
    ec2_instance_type: "t2.micro"
    ami: "ami-0c06ca6fe277114f0" 

  tasks:

    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "VPCforGAMES"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        state: present
      register: vpc

    - name: Create Subnet
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        az: "{{ availability_zone }}"
        region: "{{ region }}"
        state: present
        map_public: no
      register: subnet

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw

    - name: Retrieve Internet Gateway ID
      set_fact:
        internet_gateway_id: "{{ igw.gateway_id }}"

    - name: Create New Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "Route Tabelle"
        state: present
      register: new_route_table

    - name: Retrieve Route Table ID
      set_fact:
        main_route_table_id: "{{ new_route_table.route_table.id }}"


    - name: Create Security Group
      amazon.aws.ec2_group:
        name: "my_security_group"
        description: "Security group for ECS and EC2"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8081
            to_port: 8081
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8082
            to_port: 8082
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8083
            to_port: 8083
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Create IAM Role for EC2 and ECS
      amazon.aws.iam_role:
        name: EC2ECSRole
        assume_role_policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              },
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "ecs.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
      register: iam_role

    - name: Create IAM Policy for EC2 and ECS
      amazon.aws.iam_policy:
        policy_name: EC2AndECSPolicy
        iam_type: policy
        iam_name: "{{ iam_role.role.name }}"
        state: present
        policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:StartInstances",
                  "ec2:StopInstances",
                  "ec2:TerminateInstances",
                  "ec2:RebootInstances",
                  "ecs:DescribeClusters",
                  "ecs:DescribeServices",
                  "ecs:DescribeTaskDefinition",
                  "ecs:DescribeTasks",
                  "ecs:ListClusters",
                  "ecs:ListContainerInstances",
                  "ecs:ListServices",
                  "ecs:ListTaskDefinitionFamilies",
                  "ecs:ListTaskDefinitions",
                  "ecs:ListTasks"
                ],
                "Resource": "*"
              }
            ]
          }
      register: ec2_ecs_policy

    - name: Attach IAM Policy to IAM Role
      amazon.aws.iam_policy:
        iam_type: role
        iam_name: "{{ iam_role.role.name }}"
        policy_name: EC2AndECSPolicy
        policy_document: "{{ ec2_ecs_policy.policy }}"
        state: present


    - name: Create ECS cluster
      community.aws.ecs_cluster:
        name: "{{ ecs_cluster_name }}"
        state: present
      register: ecs_cluster


    - name: Launch EC2 Instance with ECS agent
      amazon.aws.ec2_instance:
        name: "M_346_ECS_Instance"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        region: "{{ region }}"
        state: present
        user_data: |
          #!/bin/bash
          echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config
          yum install -y aws-cli
          yum install -y ecs-init
          systemctl enable --now ecs
        network:
          subnets: ["{{ subnet.subnet.id }}"]
          assign_public_ip: yes
        wait: yes
      register: ec2_instance

    - name: Wait for the EC2 instance to be running
      amazon.aws.ec2_instance_info:
        region: "{{ region }}"
        instance_ids: "{{ ec2_instance.instance_ids }}"
      register: ec2_info

    - name: Wait for instance to join the ECS cluster
      shell: |
        aws ecs list-container-instances --cluster {{ ecs_cluster_name }} --query "containerInstanceArns[]" --output text
      register: ecs_container_instances
      until: ecs_container_instances.stdout != ''
      retries: 40
      delay: 15
      environment:
        AWS_DEFAULT_REGION: "{{ region }}"

    - name: Debug ECS Container Instances
      debug:
        msg: "ECS Container Instances: {{ ecs_container_instances.stdout }}"

    - name: Create ECS task definition
      community.aws.ecs_taskdefinition:
        family: "{{ task_definition_name }}"
        network_mode: awsvpc
        containers:
          - name: "snake"
            image: "{{ image_snake }}"
            essential: true
            memory: 16
            cpu: 4
            portMappings:
              - containerPort: 8081
            logConfiguration:
              logDriver: "awslogs"
              options:
                awslogs-group: "/ecs/{{ task_definition_name }}"
                awslogs-region: "{{ region }}"
                awslogs-stream-prefix: "ecs"
          - name: "pong"
            image: "{{ image_pong }}"
            essential: true
            memory: 16
            cpu: 4
            portMappings:
              - containerPort: 8082
            logConfiguration:
              logDriver: "awslogs"
              options:
                awslogs-group: "/ecs/{{ task_definition_name }}"
                awslogs-region: "{{ region }}"
                awslogs-stream-prefix: "ecs"
          - name: "tictactoe"
            image: "{{ image_tictactoe }}"
            essential: true
            memory: 16
            cpu: 4
            portMappings:
              - containerPort: 8083
            logConfiguration:
              logDriver: "awslogs"
              options:
                awslogs-group: "/ecs/{{ task_definition_name }}"
                awslogs-region: "{{ region }}"
                awslogs-stream-prefix: "ecs"
        cpu: "256"
        memory: "512"
        state: present
      register: task_definition

    - name: Create ECS service
      community.aws.ecs_service:
        cluster: "{{ ecs_cluster_name }}"
        name: "{{ service_name }}"
        task_definition: "{{ task_definition_name }}"
        desired_count: 1
        network_configuration:
          subnets:
            - "{{ subnet.subnet.id }}"
          assign_public_ip: false
        state: present
      register: ecs_service