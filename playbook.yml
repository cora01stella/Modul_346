- name: Erstellen von VPC, Subnet, IAM Policy/Role, ECS Cluster, ECS Service
  hosts: localhost
  gather_facts: no
  collections:
   - amazon.aws
   - community.aws
  vars_files:
    - creds_root.yml

  vars:
    region: us-east-1
    vpc_cidr: "192.168.88.0/24"
    subnet_cidr: "192.168.88.0/28"
    availability_zone: "us-east-1a"
    ecs_cluster_name: "M_346_ECS_cluster"
    service_name: "snake"
    service_name2: "pong"
    service_name3: "tictactoe"
    task_definition_name: "erstell-task-snake"
    task_definition_name2: "erstell-task-pong"
    task_definition_name3: "erstell-task-tictactoe"
    image_snake: "ghcr.io/sean-mcguinness/m169-nginx-snake:v1"
    image_pong: "ghcr.io/sean-mcguinness/m169-nginx-pong:v1"
    image_tictactoe: "ghcr.io/sean-mcguinness/m169-nginx-tictactoe:v1"
    ec2_instance_type: "t2.micro"
    ami: "ami-0c06ca6fe277114f0"

  tasks:

    - name: Erstellung VPC
      amazon.aws.ec2_vpc_net:
        name: "VPCforGAMES"
        cidr_block: "{{ vpc_cidr }}"
        region: "{{ region }}"
        state: present
      register: vpc

    - name: Erstellung Subnetz
      amazon.aws.ec2_vpc_subnet:
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        az: "{{ availability_zone }}"
        region: "{{ region }}"
        state: present
        map_public: yes
      register: subnet

    - name: Erstellung Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        state: present
      register: igw

    - name: Erstellung Route Table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        subnets:
          - "{{ subnet.subnet.id}}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "Route Tabelle"
        state: present
      register: route_table

    - name: Erstellung IAM Policy fuer EC2 und ECS
      community.aws.iam_managed_policy:
        policy_name: EC2AndECSPolicy
        state: present
        policy: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:*",
                  "ecs:*"
                ],
                "Resource": "*"
              }
            ]
          }
      register: ec2_ecs_policy

    - name: Erstellung Security Group
      amazon.aws.ec2_group:
        name: "my_security_group"
        description: "Security group fuer ECS und EC2"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ region }}"
        rules:
          - proto: all
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
      register: security_group

    - name: Erstellung IAM Role fuer EC2 und ECS
      community.aws.iam_role:
        name: EC2ECSRole
        create_instance_profile: true
        managed_policies:
          - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
          - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
          - "{{ ec2_ecs_policy.policy.arn }}"
        assume_role_policy_document: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Principal": {
                  "Service": "ec2.amazonaws.com"
                }
              }
            ]
          }
      register: iam_role

    - name: Erstellung IAM Instance Profile
      amazon.aws.iam_instance_profile:
        name: EC2ECSRole
        state: present
        role: "{{ iam_role.role_name }}"
      register: instance_profile

    - name: Erstellung ECS cluster
      community.aws.ecs_cluster:
        name: "{{ ecs_cluster_name }}"
        state: present
      register: ecs_cluster

    - name: Launch EC2 Instance mit ECS agent
      amazon.aws.ec2_instance:
        name: "M_346_ECS_Instance1"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        region: "{{ region }}"
        state: present
        user_data: |
          #!/bin/bash
          echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config
          yum install -y aws-cli
          yum install -y ecs-init
          systemctl enable --now ecs
        network:
          subnets: "{{ subnet.subnet.id }}"
          assign_public_ip: yes
        security_groups: "{{ security_group.group_id }}"
        iam_instance_profile: "{{ instance_profile.iam_instance_profile.arn }}"
        wait: yes
      register: ec2_instance

    - name: Launch EC2 Instance mit ECS agent
      amazon.aws.ec2_instance:
        name: "M_346_ECS_Instance2"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        region: "{{ region }}"
        state: present
        user_data: |
          #!/bin/bash
          echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config
          yum install -y aws-cli
          yum install -y ecs-init
          systemctl enable --now ecs
        network:
          subnets: "{{ subnet.subnet.id }}"
          assign_public_ip: yes
        security_groups: "{{ security_group.group_id }}"
        iam_instance_profile: "{{ instance_profile.iam_instance_profile.arn }}"
        wait: yes
      register: ec2_instance

    - name: Launch EC2 Instance mit ECS agent
      amazon.aws.ec2_instance:
        name: "M_346_ECS_Instance3"
        instance_type: "{{ ec2_instance_type }}"
        image_id: "{{ ami }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        region: "{{ region }}"
        state: present
        user_data: |
          #!/bin/bash
          echo ECS_CLUSTER={{ ecs_cluster_name }} >> /etc/ecs/ecs.config
          yum install -y aws-cli
          yum install -y ecs-init
          systemctl enable --now ecs
        network:
          subnets: "{{ subnet.subnet.id }}"
          assign_public_ip: yes
        security_groups: "{{ security_group.group_id }}"
        iam_instance_profile: "{{ instance_profile.iam_instance_profile.arn }}"
        wait: yes
      register: ec2_instance


    - name: Warte auf Instanz um ECS Cluster joinen
      shell: |
        aws ecs list-container-instances --cluster {{ ecs_cluster_name }} --query "containerInstanceArns[]" --output text
      register: ecs_container_instances
      until: ecs_container_instances.stdout != ''
      retries: 40
      delay: 15
      environment:
        AWS_DEFAULT_REGION: "{{ region }}"

    - name: Debug ECS Container Instances
      debug:
        msg: "ECS Container Instances: {{ ecs_container_instances.stdout }}"

    - name: Erstellung ECS task Definition 1
      community.aws.ecs_taskdefinition:
        family: "{{ task_definition_name }}"
        network_mode: awsvpc
        launch_type: FARGATE
        cpu: 256
        memory: 512
        containers:
          - name: "snake"
            image: "{{ image_snake }}"
            essential: true
            memory: 300
            cpu: 1
            portMappings:
              - containerPort: 8081
                hostPort: 8081
        state: present

    - name: Erstellung ECS Service 1
      community.aws.ecs_service:
        cluster: "{{ ecs_cluster_name }}"
        name: "{{ service_name }}"
        task_definition: "{{ task_definition_name }}"
        launch_type: FARGATE
        desired_count: 1
        network_configuration:
          subnets:
            - "{{ subnet.subnet.id }}"
          assign_public_ip: true
          security_groups:
            - "{{ security_group.group_id }}"
        state: present
      register: ecs_service
    
    - name: Erstellung ECS task Definition 2
      community.aws.ecs_taskdefinition:
        family: "{{ task_definition_name2 }}"
        network_mode: awsvpc
        launch_type: FARGATE
        cpu: 256
        memory: 512
        containers:
         - name: "pong"
           image: "{{ image_pong }}"
           essential: true
           memory: 160
           cpu: 1
           portMappings:
             - containerPort: 8082
               hostPort: 8082
        state: present  

    - name: Erstellung ECS Service 2
      community.aws.ecs_service:
        cluster: "{{ ecs_cluster_name }}"
        name: "{{ service_name2 }}"
        task_definition: "{{ task_definition_name2 }}"
        launch_type: FARGATE
        desired_count: 1
        network_configuration:
          subnets:
            - "{{ subnet.subnet.id }}"
          assign_public_ip: true
          security_groups:
            - "{{ security_group.group_id }}"
        state: present
      register: ecs_service      
  
    - name: Erstellung ECS task Definition 3
      community.aws.ecs_taskdefinition:
        family: "{{ task_definition_name3 }}"
        network_mode: awsvpc
        launch_type: FARGATE
        cpu: 256
        memory: 512
        containers:
          - name: "tictactoe"
            image: "{{ image_tictactoe }}"
            essential: true
            memory: 300
            cpu: 1
            portMappings:
              - containerPort: 8083
                hostPort: 8083
        state: present
      register: taskdefinition3

    - name: Erstellung ECS Service 3
      community.aws.ecs_service:
        cluster: "{{ ecs_cluster_name }}"
        name: "{{ service_name3 }}"
        task_definition: "{{ task_definition_name3 }}"
        launch_type: FARGATE
        desired_count: 1
        network_configuration:
          subnets:
            - "{{ subnet.subnet.id }}"
          assign_public_ip: true
          security_groups:
            - "{{ security_group.group_id }}"
        state: present
      register: ecs_service


    - name: Erstellung S3Bucket
      amazon.aws.s3_bucket:
        name: m346spielewebsite
        state: present
        region: us-east-1
        public_access: 
          block_public_acls : false
          block_public_policy: false
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        policy: |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "PublicReadGetObject",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": ["s3:GetObject"],
                      "Resource": ["arn:aws:s3:::modul346spielewebsite/*"]
                  }
              ]
          }        
        versioning: true

    - name: Hochladen index.html Datei
      amazon.aws.s3_object:
        bucket: m346spielewebsite
        object: index.html
        src: ./index.html
        mode: put
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"

    - name: Konfiguration S3Bucket als Website
      community.aws.s3_website:
        name: m346spielewebsite
        state: present
        suffix: index.html
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
